/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package johnbrooksupgrade;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.edit.PDPageContentStream;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.xobject.PDXObjectImage;
import org.apache.pdfbox.pdmodel.graphics.xobject.PDPixelMap;
//import classes for functionality

public class SalesInfo extends javax.swing.JFrame {

    protected String Filename;
    protected String Salesmen;
    protected String Date;
    protected String ClientName;
    protected String ProjectName;
    public Maininterface mainDataEntry; 
    private TextOverlay overlay;
    private BufferedImage image2;
    private String Branch;
    //import classes and creation of variables
    /**
     *
     *
     *
     *
     *
     *
     * @param mainDataEntryIn
     *
     *
     */
    public SalesInfo(Maininterface mainDataEntryIn) {   
        // This class constructor requires the calling class to pass a reference to itself.
        // That will allow each new instance of SalesInfo to know who called it.
        // Here, we call that calling class "mainDataEntry".

        initComponents();
        mainDataEntry = mainDataEntryIn; 
       
 //Referencing the other classes to bring in functionality
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Save = new javax.swing.JButton();
        SalesmenInput = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ClientnameInput = new javax.swing.JTextField();
        DateInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ProjectNameInput = new javax.swing.JTextField();
        jComboBoxBranch = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        SalesmenInput.setText("Name");
        SalesmenInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalesmenInputActionPerformed(evt);
            }
        });

        jLabel1.setText("Name of SalesPerson");

        jLabel2.setText("Name of Client");

        ClientnameInput.setText("Client");

        DateInput.setText("dd/mm/yyyy");

        jLabel3.setText("Date");

        jLabel4.setText("Project Name");

        ProjectNameInput.setText("Name");

        jComboBoxBranch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Branch", "Auckland", "Wellington", "Christchurch" }));
        jComboBoxBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxBranchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Save)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(DateInput, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(SalesmenInput)
                            .addComponent(ClientnameInput)
                            .addComponent(ProjectNameInput))
                        .addGap(146, 146, 146))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jComboBoxBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SalesmenInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientnameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ProjectNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jComboBoxBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addComponent(Save))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalesmenInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalesmenInputActionPerformed
        //old code
    }//GEN-LAST:event_SalesmenInputActionPerformed

    private void jComboBoxBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxBranchActionPerformed
        int item = jComboBoxBranch.getSelectedIndex();

        
        switch (item) {
            case 0:
                Branch = (null);

                break;
                
            case 1:
                Branch = ("AUCKLAND");

                break;
            case 2:
                Branch = ("WELLINGTON");

                break;
            case 3:
                Branch = ("CHRISTCHURCH");

                break;
        }//get the selected item
        //gets the value of the matching index or information
    }//GEN-LAST:event_jComboBoxBranchActionPerformed

    private void close() {
        WindowEvent windowclosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(windowclosingEvent);
    }//closes the window once you click save

    private void ClientSave() {
        
        try {

            PDDocument doc;
            PDPage page;

            doc = new PDDocument();

            // Create a new blank page and add it to the document
            page = new PDPage();
            doc.addPage(page);
            PDFont font = PDType1Font.TIMES_BOLD;
            PDPageContentStream content = new PDPageContentStream(doc, page);
            content.beginText();
            content.setFont(font, 30);

            // Save the newly created document
            content.moveTextPositionByAmount(170, 670);
            content.drawString("Conveyor Belt Information ");
            PDFont font2 = PDType1Font.HELVETICA;
            content.setFont(font, 14);
            content.moveTextPositionByAmount(-130, -65);
            content.drawString("Date:" + getdate());
            content.moveTextPositionByAmount(0, -20);
            content.drawString("Sales person: " + getsalesMen());
            content.moveTextPositionByAmount(0, -20);
            //grabs the values out of the variables and positions them
            switch (Branch) {
                case "AUCKLAND":
                    content.drawString("Branch:AUCKLAND");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("Freephone: 0800 48 49 50");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("E-mail: salesakl@johnbrooks.co.nz");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("5 Andromeda Cres, East Tamaki");
                    break;
                case "WELLINGTON":
                    content.drawString("Branch:WELLINGTON");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("Freephone: 0800 24 34 44");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("E-mail: saleswn@johnbrooks.co.nz");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("495 Hutt Road, Lower Hutt");
                    break;
                case "CHRISTCHURCH":
                    content.drawString("Branch:CHRISTCHURCH");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("Freephone: 0800 37 38 39");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("E-mail: saleschc@johnbrooks.co.nz");
                    content.moveTextPositionByAmount(0, -20);
                    content.drawString("214 Waltham Road, Waltham");
                    break;
            }
            //depending which case is selected the values will be outputed and also positioned
            
            content.moveTextPositionByAmount(0, -20);
            content.drawString("Client Name: " + getClientName());
            content.moveTextPositionByAmount(0, -20);
            content.drawString("Project Name: " + getProjectName());

            content.endText();
            
            overlay = new TextOverlay(this, mainDataEntry);
            overlay.imagesave();
            // code to insert a BufferedImage into a file
            
            BufferedImage img = overlay.getImage();
            PDXObjectImage ximage = new PDPixelMap(doc, img);
            content.drawImage(ximage, 120, 200); 
            //draws image and sizes it
            image2 = ImageIO.read(new File("John Brooks logo - New Globe - Industral automationresized.jpg"));
            BufferedImage logo = image2;
            //creates new file with the image in it
            PDXObjectImage jblogo = new PDPixelMap(doc, logo);

            content.drawImage(jblogo, 20, 710);
            //postioning of image
            content.close();
            doc.save(Filename + "Client.pdf");
            doc.close();

        } catch (Exception ie) {
            System.out.println(ie);
        }
    }

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {
        Salesmen = SalesmenInput.getText();
        Date = DateInput.getText();
        ClientName = ClientnameInput.getText();
        ProjectName = ProjectNameInput.getText();
        //grab values and put them into a variable
        if (Branch == null) {
            JOptionPane.showMessageDialog(null,
                    "Please Select a branch and try again.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        //error message box if they don't select a branch
        if (Branch != null) {
            

            JFileChooser chooser = new JFileChooser();
            FileNameExtensionFilter myfilter = new FileNameExtensionFilter("PDF FILE", "pdf");
            chooser.addChoosableFileFilter(myfilter);
            chooser.setAcceptAllFileFilterUsed(false);
            chooser.showSaveDialog(null);
            File myfile = chooser.getSelectedFile();
            //creates a new pdf
            if ((myfile) != null) {
                Filename = myfile.getAbsolutePath();
                try {

                    ClientSave();

                    PDDocument doc;
                    PDPage page;

                    doc = new PDDocument();
            // Create a new blank page and add it to the document
                    
                    page = new PDPage();
                    doc.addPage(page);
                    PDFont font = PDType1Font.TIMES_BOLD;
                    PDPageContentStream content = new PDPageContentStream(doc, page);
                    content.beginText();
                    content.setFont(font, 30);
            // creates a new page and gives it formatting of text
                    
                    content.moveTextPositionByAmount(170, 670);
                    content.drawString("Technical Specifications ");
                    PDFont font2 = PDType1Font.HELVETICA;
                    content.setFont(font, 14);
                    content.moveTextPositionByAmount(-130, -65);
                    content.drawString("Date:" + getdate());
                    content.moveTextPositionByAmount(0, -32);
                    content.drawString("Sales person: " + getsalesMen());
                    content.moveTextPositionByAmount(0, -32);
                    content.drawString("Client Name: " + getClientName());
                    content.moveTextPositionByAmount(0, -32);
                    content.drawString("Project Name: " + getProjectName());
                    content.moveTextPositionByAmount(0, -64);
                    
                // Loading Details    
                    content.setFont(font, 20);
                    content.drawString("Load Specifications");
                    content.setFont(font, 14);
                    content.moveTextPositionByAmount(10, -14);
                    content.drawString("Speed of Belt M/pm: " + mainDataEntry.getSpeedofbeltanswer29f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Overall Circumference : " + mainDataEntry.getCircumferenceanswer2f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Metres per minute: " + mainDataEntry.getMetresperminuteanswer4f());
                    content.moveTextPositionByAmount(-10, -28);
                    
                // Conveyor Details    
                    content.setFont(font, 20);
                    content.drawString("Conveyor Factors");
                    content.setFont(font, 14);
                    content.moveTextPositionByAmount(10, -14);
                    content.drawString("Metres per hour: " + mainDataEntry.getMetresperhouranswer5f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Product per hour: " + mainDataEntry.getLengthperhouranswer7f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Kg's per hour: " + mainDataEntry.getKgsperhouranswer9f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Kg at any given time: " + mainDataEntry.getKgatanygiventimeanswer10f());
                    content.moveTextPositionByAmount(-10, -28);
                    
                // Calculated factors    
                    content.setFont(font, 20);
                    content.drawString("Design Details");
                    content.setFont(font, 14);
                    content.moveTextPositionByAmount(10, -14);
                    content.drawString("Coeff. friction: " + mainDataEntry.getRadiananswer25f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Total belt pull Kgf  : " + mainDataEntry.getBeltloadanswer13f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Nm torque  : " + mainDataEntry.getNmanswer15f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Service Factor  : " + mainDataEntry.getServicefactor17f());
                    content.moveTextPositionByAmount(0, -14);
                    content.drawString("Design Kw  : " + mainDataEntry.getDesignkwanswer18f());
                    //grabbing the values in the selected variables and positions them

                    content.endText();
                    image2 = ImageIO.read(new File("John Brooks logo - New Globe - Industral automationresized.jpg"));
                    BufferedImage logo = image2;
                    // writes the image to the file
                    
                    PDXObjectImage jblogo = new PDPixelMap(doc, logo);

                    content.drawImage(jblogo, 20, 710);
                    //postions image
                    content.close();
                    doc.save(Filename+(".pdf"));
                    doc.close();
                    close();
                    //saves pdf and closes it
                } catch (Exception ie) {
                    System.out.println(ie);
                }
            }
        }
    }

    public String getdate() {
        return Date;
    }

    public String getsalesMen() {
        return Salesmen;
    }

    public String getClientName() {
        return ClientName;
    }

    public String getProjectName() {
        return ProjectName;
    }

   //get statements


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ClientnameInput;
    private javax.swing.JTextField DateInput;
    private javax.swing.JTextField ProjectNameInput;
    private javax.swing.JTextField SalesmenInput;
    private javax.swing.JButton Save;
    private javax.swing.JComboBox jComboBoxBranch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
